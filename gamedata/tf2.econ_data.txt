"Games"
{
	"tf"
	{
		"Signatures"
		{
			"GEconItemSchema()"
			{
				"library"	"server"
				"linux"		"@_Z15GEconItemSchemav"
				"windows"	"\xE8\x2A\x2A\x2A\x2A\x83\xC0\x04\xC3"
			}
			"CEconItemSchema::GetItemDefinition()"
			{
				"library"	"server"
				"linux"		"@_ZN15CEconItemSchema17GetItemDefinitionEi"
				"windows"	"\x55\x8B\xEC\x56\x8B\xF1\x8D\x45\x08\x57\x50\x8D\x8E\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0"
			}
			"CEconItemSchema::GetAttributeDefinition()"
			{
				"library"			"server"
				"linux"				"@_ZN15CEconItemSchema22GetAttributeDefinitionEi"
				"windows"			"\x55\x8B\xEC\x83\xEC\x2A\x53\x56\x8B\xD9\x8D\x2A\x2A\x57"
			}
			"TranslateWeaponEntForClass()"
			{
				// get x-ref to structure containing string "saxxy"
				"library"	"server"
				"linux"		"@_Z26TranslateWeaponEntForClassPKci"
				"windows"	"\x55\x8B\xEC\x53\x8B\x5D\x08\x56\x57\x85\xDB\x74\x2A\x33\xFF"
			}
			
			"KeyValues::GetString()"
			{
				// contains semi-unique x-ref "%lld" (in the windows version there's two refs to it in the function)
				"library"	"server"
				"linux"		"@_ZN9KeyValues9GetStringEPKcS1_"
				"windows"	"\x55\x8B\xEC\x81\xEC\x40\x02\x00\x00"
			}
			"KeyValues::FindKey()"
			{
				// first call in KeyValues::GetString()
				"library"	"server"
				"linux"		"@_ZN9KeyValues7FindKeyEPKcb"
				"windows"	"\x55\x8B\xEC\x81\xEC\x04\x01\x00\x00\x56\x8B\x75\x08\x57"
			}
		}
		
		"Offsets"
		{
			"CEconItemDefinition::m_pKeyValues"
			{
				// in CEconItemDefinition::GetDefinitionString()
				"linux"		"4"
				"windows"	"4"
			}
			"CEconItemDefinition::m_u8MinLevel"
			{
				// in CEconItemDefinition::RollItemLevel()
				"linux"		"17"
				"windows"	"17"
			}
			"CEconItemDefinition::m_u8MaxLevel"
			{
				// in CEconItemDefinition::RollItemLevel()
				"linux"		"18"
				"windows"	"18"
			}
			"CEconItemDefinition::m_pszLocalizedItemName"
			{
				// set near x-ref "Test Item %d"
				"linux"		"52"
				"windows"	"52"
			}
			"CEconItemDefinition::m_pszItemClassname"
			{
				// x-ref "item_class" in CEconItemDefinition::BInitFromKV()
				"linux"		"208"
				"windows"	"208"
			}
			"CEconItemDefinition::m_pszItemName"
			{
				"linux"		"220"
				"windows"	"220"
			}
			
			// wait, shoot, this is CTFItemDefinition -- rename this once the next revision is out?
			"CEconItemDefinition::m_aiItemSlot"
			{
				// array mapping class indices to item slots (-1 if not valid for class)
				// x-ref "used_by_classes" in CTFItemDefinition::BInitFromKV()
				// offset in second-to-last block before loop
				"linux"		"512"
				"windows"	"512"
			}
			
			"CEconItemAttributeDefinition::m_pKeyValues"
			{
				// set in CEconItemAttributeDefinition::BInitFromKV() after KeyValues::MakeCopy()
				"linux"		"0"
				"windows"	"0"
			}
			"CEconItemAttributeDefinition::m_bHidden"
			{
				"linux"		"12"
				"windows"	"12"
			}
			"CEconItemAttributeDefinition::m_bIsInteger"
			{
				"linux"		"14"
				"windows"	"14"
			}
			"CEconItemAttributeDefinition::m_pszAttributeName"
			{
				"linux"		"48"
				"windows"	"48"
			}
			"CEconItemAttributeDefinition::m_pszAttributeClass"
			{
				"linux"		"52"
				"windows"	"52"
			}
			
			
			"CEconItemSchema::m_ItemList"
			{
				// CUtlVector (?) with struct (int defindex, CEconItemDefinition*, int unknown)
				// in CEconItemSchema::GetItemDefinitionByName(), dereferenced inside loop
				"linux"		"232"
				"windows"	"232"
			}
			"CEconItemSchema::m_nItemCount"
			{
				// in CEconItemSchema::GetItemDefinitionByName(), in the beginning block
				// this doesn't line up with the usual CUtlVector struct /shrug
				"linux"		"252"
				"windows"	"252"
			}
			
			"CTFItemSchema::m_ItemSlotNames"
			{
				// used in CTFItemDefinition::BInitFromKV() in the same block that "head" and "misc" are referenced
				// on Windows, "misc" is a unique subroutine x-ref
				"linux"		"1432"
				"windows"	"1432"
			}
		}
	}
}
